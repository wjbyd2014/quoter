Function countStock(path,date1,date2);
Begin
    if not path then
        return '非法路径';

    // 获取板块信息文件，计算板块总数
    bkFileList := iterDir(path);
    fileNum := length(bkFileList);
    
    if fileNum = 0 then
       return path + '中没有发现任何stock文件';

    // 解析板块文件，获取板块类型，板块名，股票列表
    arrBk := parseFile(bkFileList, fileNum);

    bkZf := array();
    bkNum := length(arrBk);
    
    // 计算每一天，每一个板块的平均涨幅，取top5记录下来
    for d := date1 to date2 do
    begin
        if not spec(isTradeDay(inttodate(d)), 'SH000001') then
            continue;
            
        for i := 0 to bkNum - 1 do
        begin
            bkInfo := arrBk[i];
            
            // 计算某一个板块单日涨幅信息
            ret := countZF(bkInfo['stocks'], d);
            avgzf := ret['平均涨幅'];
            ggzf := ret['个股涨幅'];
            
            // 对该板块的个股涨幅做一次排序
            sortTableByField(ggzf, '股票涨幅', 0);
            
            // 计算龙1-龙5
            龙头 := GetTopN(ggzf, 5);
            龙头数 := length(龙头);
            bestStocks := zeros(5, array('股票名称', '股票涨幅'));
            for j := 0 to 龙头数 - 1 do
                bestStocks[j] := array('股票名称':龙头[j]['股票名称']+'('+龙头[j]['股票代码']+')',
                              '股票涨幅':龙头[j]['股票涨幅']);
                
            // 保存板块涨幅信息
            bkZf[i] := array('板块类型':bkInfo['bkType'], '板块名称':bkInfo['bkName'], '板块平均涨幅':avgzf,
                    '龙一股票':bestStocks[0]['股票名称'], '龙一涨幅':bestStocks[0]['股票涨幅'],
                    '龙二股票':bestStocks[1]['股票名称'], '龙二涨幅':bestStocks[1]['股票涨幅'],
                    '龙三股票':bestStocks[2]['股票名称'], '龙三涨幅':bestStocks[2]['股票涨幅'],
                    '龙四股票':bestStocks[3]['股票名称'], '龙四涨幅':bestStocks[3]['股票涨幅'],
                    '龙五股票':bestStocks[4]['股票名称'], '龙五涨幅':bestStocks[4]['股票涨幅']);
        end
        
        // 按板块平均涨幅一列排序
        sortTableByField(bkZf,"板块平均涨幅", 0);
        store(bkZf, d);
    end
End;

Function countZF(stocks, date);
Begin
    sumzf := 0.0;
    num := 0;
    stockNum := length(stocks);
    arrzf := array();
    for i := 0 to stockNum - 1 do
    begin
        if not stocks[i] then
            continue;

        stock := str2array(stocks[i], ":");
        stockName := stock[0];
        stockCode := stock[1];

        if not spec(IsTradeDay(inttodate(date)), stockCode) then
            continue;
             
        zf := getZF(date, stockCode);
        sumzf += zf;
        arrzf[num] := array('股票名称':stockName, '股票代码':stockCode, '股票涨幅':zf);
        num += 1;
    end
    return array('平均涨幅':sumzf / num, '个股涨幅':arrzf);
End;

// 计算股票涨幅
Function getZF(date, stockCode);
Begin
    EndT:= inttodate(date);
    return spec(StockZf4(EndT), stockCode);
End;

// 遍历目录中的stock文件
Function iterDir(dirPath);
Begin
    arrFiles := rdo2 filelist("", dirPath + '\\*.stock');
    result := array();
    for i := 0 to length(arrFiles) - 1 do
    begin
        result[i] := dirPath + '\\' + arrFiles[i]['FileName'];
    end
    return result;
End;

Function parseFile(stockFileList, fileNum);
begin
    retArray := array();
    for i := 0 to fileNum - 1 do
    begin
        fileName := str2array(stockFileList[i], '\\')[3];
        arr := str2array(fileName, '.');
        bkType := arr[0];
        bkName := arr[1];

        size := rdo2 filesize("", stockFileList[i]);
        retRead := rdo2 readFile(rwraw(), "", stockFileList[i], 0, size, data);
        if not retRead then
            return;

        if not data then
           return;

        stocks := str2array(data, ";");
        retArray[i] := array('bkType':bkType, 'bkName':bkName, 'stocks': stocks);
    end
    return retArray;
End;

Function store(data, d);
begin
     fileName := "D:\\板块涨幅\\" + IntToStr(d) + '.xls';
     rdo2 exportfile(ftxls(), "", fileName, data);
end;
